# -*- coding: utf-8 -*-
"""blotto_game.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GyjXHsYAUeq820-U2EmKSRxN4jivwrTM
"""

import numpy as np
import random

def battle(strat1, strat2) :
  win1, win2 = 0,0
  for i in range(5):
    if strat1[i] > strat2[i] :
      win1 = win1 + 1
      win2 = win2 - 1
    elif strat1[i] < strat2[i]:
      win2 = win2 + 1
      win1 = win1 - 1
  
  if win2 > win1 :
    his_wins.append(strat2)
  else:
    my_wins.append(strat1)
    # print(strat2)
  return win1, win2

for i in range(20) :
  my = random_strategy()

def random_strategy ():
  st = np.random.randint(0,100,5)
  sum = np.sum(st)
  st = np.round(st*100/sum)
  if np.sum(st) == 101:
    st[4] -= 1
  elif np.sum(st) == 99:
    st[4] += 1

  np.random.shuffle(st)
  # print('Random sum', np.sum(st))
  # print('New opp strategy:', his)
  return st

def cut_to_100(st):
  li = len(st) - 1
  if np.sum(st[0:li-1]) > 100:
    st = np.zeros(5) + cut_to_100(st[0:li-1])
  else:
    st[li] = 100 - np.sum(st[0:li-1])

def random_strategy ():
  st = np.round(np.random.randint(0,100,4)*0.5)
  if np.sum(st) > 100 :
    if np.sum(st[0:2]) > 100:
        st[2] = 0
    last_field = 0
  else:
    last_field = 100 - np.sum(st)
  st = np.append(st,last_field)
  np.random.shuffle(st)
  print('Random sum', np.sum(st))
  # print('New opp strategy:', his)
  return st

his_wins = []
my_wins = []
for i in range(20) :
  my_strategy = re_random_his2()
  his = re_random_his2()
  battle(my_strategy, his)
  # print(battle(my_strategy, his))
print('my')
print(np.matrix(my_wins))
print('his')
print(np.matrix(his_wins))

def tournament(strategies, print_scores = False) :
  strat_len = len(strategies)
  scores = np.zeros(strat_len)
  for i in range(strat_len):
    for j in range(i+1, strat_len):
      s1 = strategies[i]
      s2 = strategies[j]
      res1, res2 = battle(s1,s2)
      scores[i] += res1
      scores[j] += res2

  if print_scores:
    print(scores)
  return scores

my_strategy = random_strategy()

def create_villans(rand_strategies, equal = 0, thirds = 0):
  v = []
  for i in range(rand_strategies):
    v.append(random_strategy())
  for i in range(equal):
    v.append([20, 20, 20, 20, 20])
  
  for i in range(thirds):
    temp = np.array([33,33,34,0,0])
    np.random.shuffle(temp)
    v.append(temp)
  
  return v

def update_strategy(base_strategy, learning_rate = 1):
  rand_strategy = random_strategy()
  new_strategy = base_strategy*learning_rate + rand_strategy*(1-learning_rate)
  sum = np.sum(new_strategy)
  new_strategy = np.round(new_strategy*100/sum)
  if np.sum(new_strategy) == 101:
    new_strategy[4] -= 1
  elif np.sum(new_strategy) == 99:
    new_strategy[4] += 1
  np.random.shuffle(new_strategy)
 # print('Updated strategy:', new_strategy, '\n')
  return new_strategy

villians_count = 8
villians_random = 1
villians_equal = 1
villians_thirds = 6
assert(villians_count == villians_random + villians_equal + villians_thirds)

my_strategy=[35,25,35,3,2]

global_scores = np.zeros(villians_count + 1)
losses_count = 0
games_won_by = np.zeros(villians_count + 1)
my_index = 0
for i in range(50):
  players = create_villans(villians_random, equal=villians_equal, thirds=villians_thirds)
  # my_strategy=[35,25,35,3,2]
  players.insert(my_index, my_strategy)
  tournament_strategies = players
  # print('t_s in loop', tournament_strategies)
  results = tournament(tournament_strategies)
  global_scores = global_scores + results
  # print('Best strategy index:',np.argmax(results))
  player_won_index = np.argmax(results)
  games_won_by[player_won_index] += 1
  best_outcome = tournament_strategies[player_won_index]
  #print('Best strategy:',best_outcome,'from', np.argmax(results))
  if player_won_index != my_index:
    losses_count += 1
    my_strategy = update_strategy(best_outcome)
    # print('new strat', my_strategy)

print('--------------')
print('Global scores',global_scores)
print('Strategy',my_strategy)
# print('Wins distribution',games_won_by)

def foo(my_strategy, villians_random, villians_equal, villians_thirds, print_outcome = False, villians_smart = 0):
  villians_count = villians_random + villians_equal + villians_thirds + villians_smart
  global_scores = np.zeros(villians_count + 1)
  losses_count = 0
  games_won_by = np.zeros(villians_count + 1)
  my_index = 0
  for i in range(50):
    players = create_villans(villians_random, equal=villians_equal, thirds=villians_thirds)
    # my_strategy=[35,25,35,3,2]
    players.insert(my_index, my_strategy)
    # print('ms',my_strategy)
    # smart_strategy = mimic_strategy(my_strategy)
    # players.append(smart_strategy)
    # print('ss',smart_strategy)
    # print('mss',my_strategy)
    results = tournament(players)
    global_scores = global_scores + results
    player_won_index = np.argmax(results)
    # games_won_by[player_won_index] += 1
    best_outcome = players[player_won_index]
    if player_won_index != my_index:
      losses_count += 1
      # my_strategy = update_strategy(best_outcome)
      # print('new strat', my_strategy)
  if print_outcome:
    print('--------------')
    print('Global scores',global_scores)
    print('Strategy',my_strategy)
  return global_scores

my_strategy=[2,23,38,35,2]

my_strategy=[3,26,35,2,34]

# my_strategy=[3,26,35,2,34]
# scores = foo(my_strategy, 10, 10, 10,print_outcome = True)
# print(scores[0]/scores[-1])

my_strategy=[3,22,36,4,35]
scores = foo(my_strategy, 10, 10, 10,print_outcome = True)
print(scores[0]/scores[-1])
# print(my_strategy)

dim = 21
min1 = 6
matr = np.zeros((dim - min1,dim - min1))
for ra in range(1):
  for tw in range(min1,dim):
    for th in range(min1,dim):
      my_strategy=[4,22,35,4,35]
      scores = foo(my_strategy, ra, tw, th)
      value1 = np.round(scores[0]/scores[-1], 2)

      my_strategy=[3,26,35,2,34]
      scores = foo(my_strategy, ra, tw, th)
      value2 = np.round(scores[0]/scores[-1], 2)
      matr[tw-min1][th-min1] = np.round(value1/value2,1)
print(matr)

  # shake(my_strategy)

  # print(my_strategy)
  # s = np.array()

def shake(my_strategy):
  # print(my_strategy)
  i1 = np.random.randint(0,5)
  if i1 == 4:
    i2 = 0
  else:
    i2 = i1 + 1
  o_my_strategy = np.array(my_strategy)
  my_strategy[i1] += 1
  my_strategy[i2] -= 1
  if any(item < 0 for (item) in my_strategy):
    shake(o_my_strategy)
    
  # print(my_strategy)
  return my_strategy

def update_strategy(base_strategy, learning_rate = 0.5):
  # rand_strategy = shake(base_strategy)
  rand_strategy = random_strategy()
  new_strategy = base_strategy*learning_rate + rand_strategy*(1-learning_rate)
  new_strategy = rand_strategy
  sum = np.sum(new_strategy)
  new_strategy = np.round(new_strategy*100/sum)
  if np.sum(new_strategy) == 101:
    new_strategy[4] -= 1
  elif np.sum(new_strategy) == 99:
    new_strategy[4] += 1
  np.random.shuffle(new_strategy)
  # print('Updated strategy:', new_strategy)
  return new_strategy

def mimic_strategy(st):
  dev = st.copy()
  i1 = np.random.randint(0,5)
  if i1 == 4:
    i2 = 0
  else:
    i2 = i1 + 1
  dev[i1] += 1
  dev[i2] -= 1
  if any(item < 0 for (item) in dev):
    mimic_strategy(st)
  return dev

